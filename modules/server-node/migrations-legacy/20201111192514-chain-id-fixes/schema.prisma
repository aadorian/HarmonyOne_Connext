generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["connectOrCreate"]
  binaryTargets   = ["native"]
}

datasource db {
  provider = ["postgresql", "sqlite"]
  url = "***"
}

model Balance {
  participant      String
  assetId          String
  to               String
  amount           String
  processedDeposit String
  Channel          Channel @relation(fields: [channelAddress], references: [channelAddress])
  channelAddress   String

  @@id([participant, channelAddress, assetId])
  @@map(name: "balance")
}

model Channel {
  channelAddress           String    @id
  publicIdentifierA        String
  publicIdentifierB        String
  participantA             String
  participantB             String
  assetIds                 String
  timeout                  String
  nonce                    Int
  merkleRoot               String
  balances                 Balance[]
  channelFactoryAddress    String
  transferRegistryAddress  String
  chainId                  String
  providerUrl              String
  latestUpdate             Update?
  defundNonce              String
  inDispute                Boolean

  activeTransfers Transfer[]

  OnchainTransaction OnchainTransaction[]
  @@unique([publicIdentifierA, publicIdentifierB, chainId])
  @@unique([participantA, participantB, chainId])
  @@map(name: "channel")
}

model Update {
  // COMMON PARAMS
  channelAddress   String?
  channel          Channel? @relation(fields: [channelAddress], references: [channelAddress])
  channelAddressId String // required for ID so that relation can be removed

  fromIdentifier String
  toIdentifier   String
  type           String
  nonce          Int

  // balance
  amountA String
  amountB String
  toA     String
  toB     String

  assetId    String
  signatureA String?
  signatureB String?

  // DETAILS
  // deposit details
  totalDepositsAlice String?
  totalDepositsBob String?

  // create details
  transferAmountA      String?
  transferAmountB      String?
  transferToA          String?
  transferToB          String?
  transferId           String?
  transferDefinition   String?
  transferTimeout      String?
  transferInitialState String? // JSON string
  transferEncodings    String?
  merkleProofData      String? // proofs.join(",")
  meta                 String?
  responder            String?

  // resolve details
  transferResolver String?
  merkleRoot       String?

  // setup inferred from channel params

  createdTransfer  Transfer? @relation("CreatedTransfer")
  resolvedTransfer Transfer? @relation("ResolvedTransfer")

  @@id([channelAddressId, nonce])
  @@map(name: "update")
}

model Transfer {
  transferId String @id
  routingId  String
  inDispute  Boolean

  createUpdate  Update? @relation(name: "CreatedTransfer", fields: [createUpdateChannelAddressId, createUpdateNonce], references: [channelAddressId, nonce])
  resolveUpdate Update? @relation(name: "ResolvedTransfer", fields: [resolveUpdateChannelAddressId, resolveUpdateNonce], references: [channelAddressId, nonce])

  // balance
  amountA String
  amountB String
  toA     String
  toB     String

  initialStateHash String

  channel          Channel? @relation(fields: [channelAddress], references: [channelAddress])
  channelAddress   String?
  channelAddressId String // required for ID so that relation can be removed

  // created will always exist
  createUpdateChannelAddressId String?
  createUpdateNonce            Int?

  // resolved will not always exist
  resolveUpdateChannelAddressId String?
  resolveUpdateNonce            Int?

  @@unique([routingId, channelAddressId])
  @@map(name: "transfer")
}

model EventSubscription {
  id               String @id @default(uuid())
  event            String
  publicIdentifier String
  url              String

  @@unique([publicIdentifier, event])
  @@map(name: "event-subscription")
}

model OnchainTransaction {
  // Response fields
  transactionHash String @id
  to              String
  from            String
  data            String
  value           String
  chainId         String
  nonce           Int
  gasLimit        String
  gasPrice        String

  // Receipt fields
  timestamp         String?
  raw               String?
  blockHash         String?
  blockNumber       Int?
  contractAddress   String?
  transactionIndex  Int?
  root              String?
  gasUsed           String?
  logsBloom         String?
  logs              String?
  cumulativeGasUsed String?
  byzantium         Boolean?

  // Channel fields
  status         String  @default("submitted") // no enums
  reason         String // no enums
  error          String?
  channelAddress String
  channel        Channel @relation(fields: [channelAddress], references: [channelAddress])

  @@unique([transactionHash, chainId])
  @@map(name: "onchain_transaction")
}

model Configuration {
  id       Int    @id
  mnemonic String @unique

  @@map(name: "configuration")
}

model NodeIndex {
  index            Int    @id
  publicIdentifier String @unique

  @@map(name: "node_index")
}
